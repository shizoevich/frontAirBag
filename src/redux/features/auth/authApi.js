import { apiSlice } from "@/redux/api/apiSlice";
import { userLoggedIn, userLoggedOut } from "./authSlice";
import { setAuth, updateAuth, removeAuth, getAuth } from "@/utils/authStorage";
import Cookies from "js-cookie";

export const authApi = apiSlice.injectEndpoints({
  overrideExisting: true,
  endpoints: (builder) => ({
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    login: builder.mutation({
      query: (data) => {
        const payload = {
          // Many backends accept either email or username; include both for compatibility
          email: data.email,
          username: data.email,
          password: data.password,
        };
        return {
          url: "/auth/login/",
          method: "POST",
          body: payload,
        };
      },

      async onQueryStarted(arg, { queryFulfilled, dispatch }) {
        console.log('üîß LOGIN API: onQueryStarted called with arg:', arg);
        try {
          console.log('üîß LOGIN API: Waiting for queryFulfilled...');
          const result = await queryFulfilled;
          console.log('üîß LOGIN API: queryFulfilled resolved, result:', result);
          console.log('Login successful, received tokens:', { access: !!result.data.access, refresh: !!result.data.refresh });
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ localStorage (–±–µ–∑ cookies)
          const { access, refresh } = result.data;
          setAuth({ accessToken: access, refreshToken: refresh });
          console.log('Tokens saved to localStorage');

          // –î–∏—Å–ø–∞—Ç—á–∏–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
          dispatch(
            userLoggedIn({
              accessToken: access,
            })
          );
          console.log('Redux state updated with access token');
          
          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º cookie –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å authMiddleware –∏ initialState
          try {
            Cookies.set(
              'userInfo',
              JSON.stringify({
                accessToken: access,
                refreshToken: refresh,
                // user –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ–º, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ getUser
              }),
              { expires: 7 }
            );
            console.log('Cookies userInfo set (tokens)');
          } catch (cookieErr) {
            console.error('Failed to set cookies userInfo after login:', cookieErr);
          }
          
          // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∂–¥–µ–º –∏—Ö –∑–∞–≥—Ä—É–∑–∫–∏
          try {
            console.log('Fetching user data...');
            const userResult = await dispatch(authApi.endpoints.getUser.initiate()).unwrap();
            console.log('User data loaded successfully:', userResult);
          } catch (userError) {
            console.error('Failed to load user data after login:', userError);
          }
        } catch (err) {
          console.log('üîß LOGIN API: queryFulfilled rejected, error:', err);
          // RTK Query may attach the error under err.error or err.data
          const status = err?.error?.status ?? err?.status;
          const data = err?.error?.data ?? err?.data;
          const message = data?.detail || data?.message || err?.error || err?.message || 'Unknown error';
          console.error('üîß LOGIN API: Login error details:', { status, data, message, fullError: err });
          console.error('Login error:', { status, data, message });
        }
      },
    }),
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUser: builder.query({
      query: () => ({
        url: "/auth/me/",
        method: "GET",
      }),

      async onQueryStarted(arg, { queryFulfilled, dispatch }) {
        try {
          const result = await queryFulfilled;
          console.log('GetUser successful, received user data:', result.data);
          
          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
          const existing = getAuth();
          console.log('Current auth data in localStorage:', existing);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ store —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
          dispatch(
            userLoggedIn({
              accessToken: existing?.accessToken || null, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
              user: result.data,
              isGuest: result.data.is_guest || false,
              guestId: result.data.guest_id || null,
            })
          );
          console.log('Redux state updated with user data and token');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º localStorage —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
          if (existing) {
            try {
              const updatedData = {
                user: result.data,
                isGuest: result.data.is_guest || false,
                guestId: result.data.guest_id || null,
              };
              updateAuth(updatedData);
              console.log('Updated localStorage with user data:', updatedData);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
              const verifyData = getAuth();
              console.log('Verification - auth data after update:', verifyData);
            } catch (storageError) {
              console.error('Error updating local auth with user data:', storageError);
            }
          } else {
            console.warn('No existing auth data found in localStorage during user data update');
          }

          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º cookie userInfo —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö (tokens + user)
          try {
            const cookieExisting = Cookies.get('userInfo');
            const cookieTokens = cookieExisting ? JSON.parse(cookieExisting) : {};
            Cookies.set(
              'userInfo',
              JSON.stringify({
                accessToken: cookieTokens.accessToken || existing?.accessToken || null,
                refreshToken: cookieTokens.refreshToken || null,
                user: result.data,
                isGuest: result.data.is_guest || false,
                guestId: result.data.guest_id || null,
              }),
              { expires: 7 }
            );
            console.log('Cookies userInfo updated with user data');
          } catch (cookieErr) {
            console.error('Failed to update cookies userInfo after getUser:', cookieErr);
          }
        } catch (err) {
          console.error('Get user error:', err);
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401, –≤—ã–ø–æ–ª–Ω—è–µ–º logout
          if (err?.error?.status === 401) {
            dispatch(userLoggedOut());
          }
        }
      },
      providesTags: ['User'],
    }),
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞
    refreshToken: builder.mutation({
      query: (refreshToken) => ({
        url: "/auth/token/refresh/",
        method: "POST",
        body: { refresh: refreshToken },
      }),

      async onQueryStarted(arg, { queryFulfilled, dispatch }) {
        try {
          const result = await queryFulfilled;
          
          // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π access —Ç–æ–∫–µ–Ω
          const { access } = result.data;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ cookie
          const userInfo = getAuth() || {};
          setAuth({ ...userInfo, accessToken: access });

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ store
          dispatch(
            userLoggedIn({
              accessToken: access,
            })
          );
        } catch (err) {
          console.error('Refresh token error:', err);
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å refresh —Ç–æ–∫–µ–Ω–æ–º, –≤—ã–ø–æ–ª–Ω—è–µ–º logout
          dispatch(userLoggedOut());
        }
      },
    }),
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
    verifyToken: builder.mutation({
      query: (token) => ({
        url: "/auth/token/verify/",
        method: "POST",
        body: { token },
      }),
    }),
    
    // –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logout: builder.mutation({
      query: () => ({
        url: "/auth/logout/", // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è logout
        method: "POST",
      }),
      
      // –î–∞–∂–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è, –º—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º logout –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
      async onQueryStarted(arg, { queryFulfilled, dispatch }) {
        // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        removeAuth();
        dispatch(userLoggedOut());
        
        try {
          await queryFulfilled;
          console.log('Server logout successful');
        } catch (err) {
          console.log('Server logout failed, but client logout completed:', err?.status || 'Unknown error');
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π logout —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω
        }
      },
    }),
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    register: builder.mutation({
      query: (data) => ({
        url: "/auth/register/",
        method: "POST",
        body: data,
      }),
      
      async onQueryStarted(arg, { queryFulfilled, dispatch }) {
        try {
          const result = await queryFulfilled;
          console.log("Registration successful:", result);
          
          // –ï—Å–ª–∏ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ guest_id, —ç—Ç–æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≥–æ—Å—Ç—è –≤ –∫–ª–∏–µ–Ω—Ç–∞
          if (arg.guest_id) {
            console.log("Guest-to-client conversion completed");
            
            // –ü–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ª–æ–≥–∏–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
            const loginResult = await dispatch(
              authApi.endpoints.login.initiate({
                email: arg.email,
                password: arg.password,
                remember: true,
              })
            ).unwrap();
            
            console.log("Post-conversion login successful:", loginResult);
          }
        } catch (err) {
          console.error('Registration error:', err);
        }
      },
    }),

    // –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    createGuest: builder.mutation({
      query: (data) => ({
        url: "/auth/guest/", // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Å—Ç—è
        method: "POST",
        body: {
          name: data.name || "Test",
          last_name: data.last_name || "Guest",
          phone: data.phone || "",
          nova_post_address: data.nova_post_address || ""
        },
      }),
      
      async onQueryStarted(arg, { queryFulfilled, dispatch }) {
        try {
          const result = await queryFulfilled;
          console.log("Guest creation successful:", result);
          
          // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç /auth/guest/ –≤–µ—Ä–Ω–µ—Ç —Ç–æ–∫–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é
          const { access, refresh, guest_id } = result.data;
          
          if (access && refresh) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Å—Ç–µ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
            const guestData = {
              accessToken: access,
              refreshToken: refresh,
              isGuest: true,
              guestId: guest_id,
            };
            
            Cookies.set(
              "userInfo",
              JSON.stringify(guestData),
              { expires: 365 } // –ì–æ—Å—Ç–µ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –≥–æ–¥ (–±–µ—Å—Å—Ä–æ—á–Ω—ã–µ refresh)
            );
            
            console.log("Guest tokens saved:", guestData);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Redux
            dispatch(
              userLoggedIn({
                accessToken: access,
                user: null, // –ì–æ—Å—Ç—å –Ω–µ –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                isGuest: true,
                guestId: guest_id,
              })
            );
            
            console.log("Guest state updated in Redux");
          } else {
            throw new Error("–ì–æ—Å—Ç–µ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã");
          }

        } catch (err) {
          console.error('Guest creation error:', err);
          console.error('Error details:', {
            message: err?.message,
            status: err?.status,
            data: err?.data
          });
          throw err;
        }
      },
    }),
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateProfile: builder.mutation({
      query: (data) => ({
        url: "/auth/me/",
        method: "PATCH",
        body: data,
      }),
      
      async onQueryStarted(arg, { queryFulfilled, dispatch }) {
        try {
          const result = await queryFulfilled;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ store
          dispatch(
            userLoggedIn({
              user: result.data,
            })
          );
        } catch (err) {
          console.error('Update profile error:', err);
        }
      },
      invalidatesTags: ['User'],
    }),
  }),
});

export const {
  useLoginMutation,
  useRegisterMutation,
  useCreateGuestMutation,
  useGetUserQuery,
  useRefreshTokenMutation,
  useVerifyTokenMutation,
  useLogoutMutation,
  useUpdateProfileMutation,
} = authApi;
